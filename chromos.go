package chromos

import (
	"crypto/ecdsa"
	"crypto/rand"
	"crypto/sha256"
	"crypto/x509"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

const (
	googleTimeServiceURL = "http://clients2.google.com/time/1/current"
	minGoogleKeyVersion  = 1
	maxGoogleKeyVersion  = 9

	microsoftTimeServiceURL = "http://edge.microsoft.com/browsernetworktime/time/1/current"
	microsoftKeyPubBytes    = "\x30\x59\x30\x13\x06\x07\x2A\x86\x48\xCE\x3D\x02\x01\x06\x08\x2A\x86\x48\xCE\x3D\x03\x01\x07\x03\x42\x00\x04\xBB\x37\xA5\xF6\x3A\xF8\x32\x58\x1C\x89\x29\xEC\x3F\x91\x69\x23\x9B\x32\xE3\x35\xDB\x54\xFC\xD8\x8D\xAB\x36\xCD\x68\x71\x95\x50\xDD\xB4\x82\xE6\xF8\x94\xE9\xEB\x3B\x01\x4A\x9E\x15\x71\xBE\x57\x10\x8D\x8C\x1C\x7F\x39\x14\x09\xF9\x63\xD1\xA3\x81\x99\x3D\x22"
	microsoftKeyVersion     = 2

	nonceLength = 32
	emptySha256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
)

type TimeServiceConfig struct {
	timeServiceURL string
	keyVersion     int
	keyPubBytes    []byte
}

type timeServiceResponse struct {
	CurrentTimeMillis int64 `json:"current_time_millis"`
}

func generateRequestParams(config TimeServiceConfig) ([]byte, string, error) {
	nonce := make([]byte, nonceLength)
	_, err := rand.Read(nonce)
	if err != nil {
		return nil, "", err
	}

	nonceBase64 := base64.RawURLEncoding.EncodeToString(nonce)

	cup2key := strconv.Itoa(config.keyVersion) + ":" + nonceBase64

	return nonce, cup2key, nil
}

func verifyResponse(response *http.Response, config TimeServiceConfig, cup2key string, nonce []byte) ([]byte, error) {
	cupServerProofHeader := response.Header.Get("x-cup-server-proof")
	if cupServerProofHeader == "" {
		return nil, errors.New("no x-cup-server-proof header in response")
	}

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read body: %v", err)
	}

	parts := strings.Split(cupServerProofHeader, ":")
	if len(parts) != 2 {
		return nil, fmt.Errorf("x-cup-server-proof is invalid: %s", cupServerProofHeader)
	}

	signature := parts[0]
	requestHash := parts[1]

	if requestHash != emptySha256 {
		return nil, fmt.Errorf("response request hash is invalid: %s != %s", requestHash, emptySha256)
	}

	signatureBytes, err := hex.DecodeString(signature)
	if err != nil {
		return nil, fmt.Errorf("failed to dehex signature from response: %v", err)
	}

	hasher := sha256.New()
	requestHashBytes, err := hex.DecodeString(emptySha256)
	if err != nil {
		return nil, err
	}
	hasher.Write(requestHashBytes)
	bodyHash := sha256.Sum256(body)
	hasher.Write(bodyHash[:])
	hasher.Write([]byte(cup2key))

	hashToVerify := hasher.Sum(nil)

	publicKey, err := x509.ParsePKIXPublicKey(config.keyPubBytes)
	if err != nil {
		return nil, fmt.Errorf("failed to parse public key: %v", err)
	}

	var ecdsaKey *ecdsa.PublicKey

	switch publicKey := publicKey.(type) {
	case *ecdsa.PublicKey:
		ecdsaKey = publicKey
	default:
		return nil, fmt.Errorf("public key is not ecdsa: %v", publicKey)
	}

	hashedHashToVerify := sha256.Sum256(hashToVerify)

	isValid := ecdsa.VerifyASN1(ecdsaKey, hashedHashToVerify[:], signatureBytes)
	if !isValid {
		return nil, errors.New("signature invalid")
	}

	return body, nil
}

func FetchTime(config TimeServiceConfig) (int64, error) {
	client := &http.Client{}

	nonce, cup2key, err := generateRequestParams(config)
	if err != nil {
		return 0, err
	}

	values := url.Values{}
	values.Set("cup2key", cup2key)
	values.Set("cup2hreq", emptySha256)

	response, err := client.Get(fmt.Sprintf("%s?%s", config.timeServiceURL, values.Encode()))
	if err != nil {
		return 0, err
	}

	responseBody, err := verifyResponse(response, config, cup2key, nonce)
	if err != nil {
		return 0, err
	}

	var parsedResponse timeServiceResponse
	err = json.Unmarshal(responseBody[5:], &parsedResponse)
	if err != nil {
		return 0, err
	}

	return parsedResponse.CurrentTimeMillis, nil
}

// https://chromium.googlesource.com/chromium/src.git/+log/refs/heads/main/components/network_time/network_time_tracker.cc
func getGoogleKey(version int) []byte {
	switch version {
	case 1:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
			0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0xeb, 0xd8, 0xad, 0x0b, 0x8f, 0x75, 0xe8, 0x84, 0x36,
			0x23, 0x48, 0x14, 0x24, 0xd3, 0x93, 0x42, 0x25, 0x43, 0xc1, 0xde, 0x36,
			0x29, 0xc6, 0x95, 0xca, 0xeb, 0x28, 0x85, 0xff, 0x09, 0xdc, 0x08, 0xec,
			0x45, 0x74, 0x6e, 0x4b, 0xc3, 0xa5, 0xfd, 0x8a, 0x2f, 0x02, 0xa0, 0x4b,
			0xc3, 0xc6, 0xa4, 0x7b, 0xa4, 0x41, 0xfc, 0xa7, 0x02, 0x54, 0xab, 0xe3,
			0xe4, 0xb1, 0x00, 0xf5, 0xd5, 0x09, 0x11}
	case 2:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
			0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0xc9, 0xde, 0x8e, 0x72, 0x05, 0xb8, 0xb9, 0xec, 0xa4,
			0x26, 0xc8, 0x0d, 0xd9, 0x05, 0x59, 0x67, 0xad, 0xd7, 0xf5, 0xf0, 0x46,
			0xe4, 0xab, 0xe9, 0x81, 0x67, 0x8b, 0x9d, 0x2a, 0x21, 0x68, 0x22, 0xfe,
			0x83, 0xed, 0x9f, 0x80, 0x19, 0x4f, 0xc5, 0x24, 0xac, 0x12, 0x66, 0xc4,
			0x4e, 0xf6, 0x8f, 0x54, 0xb5, 0x0c, 0x49, 0xe9, 0xa5, 0xf1, 0x40, 0xfd,
			0xd9, 0x1a, 0x92, 0x90, 0x8a, 0x67, 0x15}
	case 3:
		return nil // it's missing from the repo
	case 4:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
			0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0x6E, 0xF3, 0xC6, 0x54, 0xA9, 0x86, 0x09, 0xF1, 0x1C,
			0xEE, 0x7B, 0x9D, 0x33, 0xA6, 0x04, 0x8C, 0x44, 0xA2, 0xF7, 0x8C, 0x2D,
			0x62, 0x35, 0xB3, 0x67, 0x6F, 0x1D, 0x38, 0x66, 0xF3, 0xBB, 0xAB, 0x0D,
			0x6C, 0xCE, 0x93, 0x30, 0x73, 0xBB, 0x33, 0x1D, 0x94, 0xF1, 0xB5, 0xE9,
			0x37, 0x13, 0xD9, 0xB2, 0x64, 0x37, 0x89, 0xD0, 0xE2, 0x49, 0xE3, 0x4B,
			0x34, 0x0F, 0x81, 0x8E, 0x5C, 0xA8, 0x61}
	case 5:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
			0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0xE4, 0xA5, 0xA5, 0xA1, 0x99, 0x27, 0x83, 0x2B, 0x93,
			0xF6, 0x30, 0xA6, 0x87, 0x78, 0x62, 0xB1, 0x81, 0x72, 0xD1, 0xA0, 0xB0,
			0xFD, 0x48, 0x5F, 0x29, 0x60, 0x9C, 0x96, 0xC5, 0x10, 0xE3, 0x42, 0x43,
			0x61, 0xB9, 0xDA, 0xEC, 0x30, 0xA8, 0x22, 0xA8, 0x69, 0xF7, 0x1F, 0x17,
			0x5D, 0x83, 0xF7, 0xFD, 0xAE, 0x41, 0xDB, 0x31, 0x40, 0xAF, 0xA2, 0x32,
			0xAE, 0x68, 0xFE, 0xD1, 0x6B, 0xB4, 0xB0}
	case 6:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
			0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0x59, 0x65, 0x1F, 0x1D, 0x36, 0x33, 0x81, 0xE1, 0xB2,
			0xD3, 0x78, 0x4B, 0xE1, 0x7B, 0x8D, 0x07, 0x33, 0x55, 0x4F, 0x0D, 0x67,
			0x1C, 0x33, 0xD2, 0xFE, 0x78, 0x02, 0xB6, 0xD2, 0xDF, 0x2F, 0x45, 0x1F,
			0x49, 0xBA, 0xD2, 0xE6, 0x67, 0x4E, 0x4D, 0xA9, 0x77, 0xB3, 0x34, 0x12,
			0xEB, 0x6D, 0xC0, 0xDC, 0x86, 0xE7, 0xBE, 0xF7, 0x09, 0x56, 0x77, 0x2A,
			0xF3, 0xE8, 0x4E, 0x96, 0xAB, 0xAB, 0x12}
	case 7:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
			0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0x9F, 0xB4, 0x82, 0x7E, 0xAE, 0x02, 0xA2, 0xF2, 0x9C,
			0x32, 0x8E, 0xF8, 0x00, 0xFC, 0x75, 0x45, 0xCF, 0x45, 0x36, 0x01, 0x71,
			0x93, 0x57, 0x54, 0x1C, 0xA7, 0xC5, 0x09, 0xDA, 0xB1, 0xBC, 0x36, 0xB1,
			0x44, 0x1C, 0x2E, 0x12, 0x58, 0x2F, 0xE2, 0x27, 0x40, 0x40, 0x42, 0xEE,
			0x95, 0x7A, 0xAC, 0xE4, 0x33, 0xAC, 0xAA, 0x09, 0x6F, 0x5C, 0x0F, 0x94,
			0xA7, 0xB4, 0xB5, 0xE2, 0x6B, 0xB6, 0xC4}
	case 8:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
			0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0x62, 0x54, 0x7B, 0x74, 0x30, 0xD7, 0x1A, 0x9C, 0x73,
			0x88, 0xC8, 0xEE, 0x9B, 0x27, 0x57, 0xCA, 0x2C, 0xCA, 0x93, 0xBF, 0xEA,
			0x1B, 0xD1, 0x07, 0x58, 0xBB, 0xFF, 0x83, 0x70, 0x30, 0xD0, 0x3C, 0xC7,
			0x7B, 0x40, 0x60, 0x8D, 0x3E, 0x11, 0x4E, 0x0C, 0x97, 0x16, 0xBF, 0xA7,
			0x31, 0xAC, 0x29, 0xBC, 0x27, 0x13, 0x69, 0xB8, 0x4D, 0x2B, 0x67, 0x1C,
			0x90, 0x4C, 0x44, 0x50, 0x6E, 0xD1, 0xE1}
	case 9:
		return []byte{
			0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
			0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
			0x42, 0x00, 0x04, 0x51, 0x8B, 0x06, 0x03, 0x4D, 0xEA, 0x13, 0xC3, 0x32,
			0x9B, 0x15, 0x73, 0xD6, 0xBC, 0x47, 0x33, 0x3F, 0xB6, 0x95, 0x0E, 0x5D,
			0x52, 0x73, 0x70, 0x5D, 0xE4, 0x92, 0xBD, 0xFD, 0xC5, 0xB9, 0xC6, 0x51,
			0x81, 0x2D, 0x8B, 0x46, 0xC4, 0x4C, 0xB0, 0xA5, 0xC6, 0xDB, 0x5B, 0xE4,
			0xDB, 0x80, 0x57, 0x6B, 0x4D, 0x08, 0x9C, 0x3D, 0x8B, 0xC2, 0xD9, 0x27,
			0x9A, 0xDE, 0x3D, 0xE2, 0xCC, 0x0A, 0x20}
	}
	return nil
}

func GetGoogleConfigVersion(v int) TimeServiceConfig {
	return TimeServiceConfig{
		timeServiceURL: googleTimeServiceURL,
		keyPubBytes:    getGoogleKey(v),
		keyVersion:     v,
	}
}

func GetGoogleConfig() TimeServiceConfig {
	return TimeServiceConfig{
		timeServiceURL: googleTimeServiceURL,
		keyPubBytes:    getGoogleKey(maxGoogleKeyVersion),
		keyVersion:     maxGoogleKeyVersion,
	}
}

func GetMicrosoftConfig() TimeServiceConfig {
	return TimeServiceConfig{
		timeServiceURL: microsoftTimeServiceURL,
		keyPubBytes:    []byte(microsoftKeyPubBytes),
		keyVersion:     microsoftKeyVersion,
	}
}
